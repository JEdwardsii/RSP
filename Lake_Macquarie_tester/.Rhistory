names(output) <- c("x", "y", "layer")
output <- subset(output, layer > 0)
output$Contour <- paste0((level * 100), "%")
output$Group <- factor(rep(names(dbbmm.raster)[i], nrow(output)), levels = c(names(dbbmm.raster), "Overlap"), ordered = TRUE)
return(output)
})
names(contours) <- names(dbbmm.raster)
# grab overlap list
if (is.null(timeslot)) {
overlap.raster <- input$overlap.rasters[[as.character(level)]]
}
else {
overlap.raster <- input$overlap.rasters[[as.character(level)]][[as.character(timeslot)]]
}
# get contour colours
if (is.null(color.plot)) {
color.plot <- c(cmocean::cmocean('matter')(5)[2],
cmocean::cmocean('matter')(5)[4],
cmocean::cmocean('matter')(5)[3])
}
# make each group combination plot
the.plots <- lapply(names(overlap.raster), function(i) {
# grab only relevant groups
groups <- unlist(strsplit(i, "_and_"))
# prepare overlaps
if (class(overlap.raster[[i]]) == "RasterLayer") {
aux <- raster::projectRaster(from = overlap.raster[[i]], crs = "+proj=longlat +datum=WGS84")
overlap.contours <- raster::rasterToPoints(aux)
overlap.contours <- data.frame(overlap.contours)
names(overlap.contours) <- c("x", "y", "layer")
overlap.contours <- subset(overlap.contours, layer > 0)
if (nrow(overlap.contours) > 0) {
plot.overlap <- TRUE
overlap.contours$Contour <- paste0((level * 100), "%")
overlap.contours$Group <- rep("Overlap", nrow(overlap.contours))
} else {
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
plot.overlap <- FALSE
}
} else {
plot.overlap <- FALSE
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
}
# Set colours for this run
names(color.plot) <- c(groups, "Overlap")
# start plotting
p <- ggplot2::ggplot()
for (j in groups) {
if (!is.null(contours[[j]])) {
the.contour <- contours[[j]]
the.contour$Group <- factor(the.contour$Group, levels = c(groups, "Overlap"))
p <- p + ggplot2::geom_tile(data = the.contour, ggplot2::aes(x = x, y = y, fill = Group))
rm(the.contour)
}
}
if (plot.overlap)
p <- p + ggplot2::geom_tile(data = overlap.contours, ggplot2::aes(x = x, y = y, fill = Group), show.legend = FALSE)
p <- p + ggplot2::scale_fill_manual(values = color.plot)
p <- p + ggplot2::geom_raster(data = base.map, ggplot2::aes(x = x, y = y, fill = MAP),
show.legend = FALSE, fill = land.col)
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
p <- p + ggplot2::labs(x = "Longitude", y = "Latitude", fill = "Group", title = paste(groups, collapse = " and "))
# Add stations
if (stations) {
p <- p + ggplot2::geom_point(data = input$spatial$stations, color = "white", fill = "black", shape = 21, size = 1.5,
ggplot2::aes(x = Longitude, y = Latitude))
}
# Add title
if (!is.null(main)) {
p <- p + ggplot2::labs(title = main)
}
return(p)
})
names(the.plots) <- names(overlap.raster)
# plot everything in different windows
# lapply(the.plots, function(p) {
#   dev.new()
#   print(p)
# })
# return all plots
if (store)
return(the.plots)
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = 2)
plot.save[[1]]
i <- 1
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
plot.save[[1]]
plotGIF <- function(input, timeslot = NULL, stations = FALSE,
level = .95, main = NULL, color.plot = NULL,
land.col = "#BABCBF", store = FALSE) {
# detach some objects from the main input
base.raster <- input$base.raster
if (!is.null(timeslot))
timeslot <- as.character(timeslot)
if (!is.null(timeslot) && length(timeslot) != 1)
stop("Please select only one timeslot.\n", call. = FALSE)
if (attributes(input$dbbmm)$type == "group" & !is.null(timeslot))
stop("A timeslot was selected but the dbbmm is of type 'group'.\n", call. = FALSE)
if (attributes(input$dbbmm)$type == "timeslot" & is.null(timeslot))
stop("The dbbmm is of type 'timeslot', but no timeslot was selected.\n", call. = FALSE)
if (!is.numeric(level))
stop("'levels' must be numeric.\n", call. = FALSE)
if (length(level) != 1)
stop("Please choose only one level.\n", call. = FALSE)
if (any(level >= 1 | level <= 0))
stop("Please select levels between 0 and 1 (both exclusive).\n", call. = FALSE)
if (is.na(match(level, names(input$overlap.rasters))))
stop(paste0("Overlap has not been calculated for level '", level, "'. Available levels: '", paste(names(input$overlap.rasters), collapse = "', '"), "'.\n"), call. = FALSE)
# Prepare base
base.raster <- raster::projectRaster(from = base.raster, crs = "+proj=longlat +datum=WGS84")
# Convert map raster to points
base.map <- raster::rasterToPoints(base.raster)
base.map <- data.frame(base.map)
colnames(base.map) <- c("x", "y", "MAP")
# Prepare groups
# Convert projection to lonlat projection for plotting:
if (is.null(timeslot)) {
dbbmm.raster <- lapply(input$group.rasters, function(x) {
if (class(x) != "RasterLayer")
aux <- raster::calc(x, fun = mean, na.rm = TRUE)
else
aux <- x
raster::projectRaster(from = aux, crs = "+proj=longlat +datum=WGS84")
})
} else {
aux <- input$group.rasters[!is.na(unlist(lapply(input$group.rasters, function(x) match(timeslot, names(x)))))]
dbbmm.raster <- lapply(aux, function(x, t = timeslot) {
if (class(x[[t]]) != "RasterLayer")
aux <- raster::calc(x[[t]], fun = mean, na.rm = TRUE)
else
aux <- x[[t]]
raster::projectRaster(from = aux, crs = "+proj=longlat +datum=WGS84")
})
}
# Get group contours:
contours <- lapply(seq_along(dbbmm.raster), function(i) {
the.contour <- dbbmm.raster[[i]] <= level
raster::extent(the.contour) <- raster::extent(base.raster)
output <- raster::rasterToPoints(the.contour)
output <- data.frame(output)
names(output) <- c("x", "y", "layer")
output <- subset(output, layer > 0)
output$Contour <- paste0((level * 100), "%")
output$Group <- factor(rep(names(dbbmm.raster)[i], nrow(output)), levels = c(names(dbbmm.raster), "Overlap"), ordered = TRUE)
return(output)
})
names(contours) <- names(dbbmm.raster)
# grab overlap list
if (is.null(timeslot)) {
overlap.raster <- input$overlap.rasters[[as.character(level)]]
}
else {
overlap.raster <- input$overlap.rasters[[as.character(level)]][[as.character(timeslot)]]
}
# get contour colours
if (is.null(color.plot)) {
color.plot <- c(cmocean::cmocean('matter')(5)[2],
cmocean::cmocean('matter')(5)[4],
cmocean::cmocean('matter')(5)[3])
}
# make each group combination plot
the.plots <- lapply(names(overlap.raster), function(i) {
# grab only relevant groups
groups <- unlist(strsplit(i, "_and_"))
# prepare overlaps
if (class(overlap.raster[[i]]) == "RasterLayer") {
aux <- raster::projectRaster(from = overlap.raster[[i]], crs = "+proj=longlat +datum=WGS84")
overlap.contours <- raster::rasterToPoints(aux)
overlap.contours <- data.frame(overlap.contours)
names(overlap.contours) <- c("x", "y", "layer")
overlap.contours <- subset(overlap.contours, layer > 0)
if (nrow(overlap.contours) > 0) {
plot.overlap <- TRUE
overlap.contours$Contour <- paste0((level * 100), "%")
overlap.contours$Group <- rep("Overlap", nrow(overlap.contours))
} else {
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
plot.overlap <- FALSE
}
} else {
plot.overlap <- FALSE
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
}
# Set colours for this run
names(color.plot) <- c(groups, "Overlap")
# start plotting
p <- ggplot2::ggplot()
for (j in groups) {
if (!is.null(contours[[j]])) {
the.contour <- contours[[j]]
the.contour$Group <- factor(the.contour$Group, levels = c(groups, "Overlap"))
p <- p + ggplot2::geom_tile(data = the.contour, ggplot2::aes(x = x, y = y, fill = Group))
rm(the.contour)
}
}
if (plot.overlap)
p <- p + ggplot2::geom_tile(data = overlap.contours, ggplot2::aes(x = x, y = y, fill = Group), show.legend = FALSE)
p <- p + ggplot2::scale_fill_manual(values = color.plot)
p <- p + ggplot2::geom_raster(data = base.map, ggplot2::aes(x = x, y = y, fill = MAP),
show.legend = FALSE, fill = land.col)
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
p <- p + ggplot2::labs(x = "Longitude", y = "Latitude", fill = "Group", title = paste(groups, collapse = " and "))
# Add stations
if (stations) {
p <- p + ggplot2::geom_point(data = input$spatial$stations, color = "white", fill = "black", shape = 21, size = 1.5,
ggplot2::aes(x = Longitude, y = Latitude))
}
# Add title
if (!is.null(main)) {
p <- p + ggplot2::labs(title = main)
}
p + ggplot2::guides(fill=FALSE)
return(p)
})
names(the.plots) <- names(overlap.raster)
# plot everything in different windows
# lapply(the.plots, function(p) {
#   dev.new()
#   print(p)
# })
# return all plots
if (store)
return(the.plots)
}
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
plot.save[[1]]
plot.save[[2]]
plot.save
plotGIF <- function(input, timeslot = NULL, stations = FALSE,
level = .95, main = NULL, color.plot = NULL,
land.col = "#BABCBF", store = FALSE) {
# detach some objects from the main input
base.raster <- input$base.raster
if (!is.null(timeslot))
timeslot <- as.character(timeslot)
if (!is.null(timeslot) && length(timeslot) != 1)
stop("Please select only one timeslot.\n", call. = FALSE)
if (attributes(input$dbbmm)$type == "group" & !is.null(timeslot))
stop("A timeslot was selected but the dbbmm is of type 'group'.\n", call. = FALSE)
if (attributes(input$dbbmm)$type == "timeslot" & is.null(timeslot))
stop("The dbbmm is of type 'timeslot', but no timeslot was selected.\n", call. = FALSE)
if (!is.numeric(level))
stop("'levels' must be numeric.\n", call. = FALSE)
if (length(level) != 1)
stop("Please choose only one level.\n", call. = FALSE)
if (any(level >= 1 | level <= 0))
stop("Please select levels between 0 and 1 (both exclusive).\n", call. = FALSE)
if (is.na(match(level, names(input$overlap.rasters))))
stop(paste0("Overlap has not been calculated for level '", level, "'. Available levels: '", paste(names(input$overlap.rasters), collapse = "', '"), "'.\n"), call. = FALSE)
# Prepare base
base.raster <- raster::projectRaster(from = base.raster, crs = "+proj=longlat +datum=WGS84")
# Convert map raster to points
base.map <- raster::rasterToPoints(base.raster)
base.map <- data.frame(base.map)
colnames(base.map) <- c("x", "y", "MAP")
# Prepare groups
# Convert projection to lonlat projection for plotting:
if (is.null(timeslot)) {
dbbmm.raster <- lapply(input$group.rasters, function(x) {
if (class(x) != "RasterLayer")
aux <- raster::calc(x, fun = mean, na.rm = TRUE)
else
aux <- x
raster::projectRaster(from = aux, crs = "+proj=longlat +datum=WGS84")
})
} else {
aux <- input$group.rasters[!is.na(unlist(lapply(input$group.rasters, function(x) match(timeslot, names(x)))))]
dbbmm.raster <- lapply(aux, function(x, t = timeslot) {
if (class(x[[t]]) != "RasterLayer")
aux <- raster::calc(x[[t]], fun = mean, na.rm = TRUE)
else
aux <- x[[t]]
raster::projectRaster(from = aux, crs = "+proj=longlat +datum=WGS84")
})
}
# Get group contours:
contours <- lapply(seq_along(dbbmm.raster), function(i) {
the.contour <- dbbmm.raster[[i]] <= level
raster::extent(the.contour) <- raster::extent(base.raster)
output <- raster::rasterToPoints(the.contour)
output <- data.frame(output)
names(output) <- c("x", "y", "layer")
output <- subset(output, layer > 0)
output$Contour <- paste0((level * 100), "%")
output$Group <- factor(rep(names(dbbmm.raster)[i], nrow(output)), levels = c(names(dbbmm.raster), "Overlap"), ordered = TRUE)
return(output)
})
names(contours) <- names(dbbmm.raster)
# grab overlap list
if (is.null(timeslot)) {
overlap.raster <- input$overlap.rasters[[as.character(level)]]
}
else {
overlap.raster <- input$overlap.rasters[[as.character(level)]][[as.character(timeslot)]]
}
# get contour colours
if (is.null(color.plot)) {
color.plot <- c(cmocean::cmocean('matter')(5)[2],
cmocean::cmocean('matter')(5)[4],
cmocean::cmocean('matter')(5)[3])
}
# make each group combination plot
the.plots <- lapply(names(overlap.raster), function(i) {
# grab only relevant groups
groups <- unlist(strsplit(i, "_and_"))
# prepare overlaps
if (class(overlap.raster[[i]]) == "RasterLayer") {
aux <- raster::projectRaster(from = overlap.raster[[i]], crs = "+proj=longlat +datum=WGS84")
overlap.contours <- raster::rasterToPoints(aux)
overlap.contours <- data.frame(overlap.contours)
names(overlap.contours) <- c("x", "y", "layer")
overlap.contours <- subset(overlap.contours, layer > 0)
if (nrow(overlap.contours) > 0) {
plot.overlap <- TRUE
overlap.contours$Contour <- paste0((level * 100), "%")
overlap.contours$Group <- rep("Overlap", nrow(overlap.contours))
} else {
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
plot.overlap <- FALSE
}
} else {
plot.overlap <- FALSE
message("M: No overlap found between '", groups[1], "' and '", groups[2], "'.")
}
# Set colours for this run
names(color.plot) <- c(groups, "Overlap")
# start plotting
p <- ggplot2::ggplot()
for (j in groups) {
if (!is.null(contours[[j]])) {
the.contour <- contours[[j]]
the.contour$Group <- factor(the.contour$Group, levels = c(groups, "Overlap"))
p <- p + ggplot2::geom_tile(data = the.contour, ggplot2::aes(x = x, y = y, fill = Group))
rm(the.contour)
}
}
if (plot.overlap)
p <- p + ggplot2::geom_tile(data = overlap.contours, ggplot2::aes(x = x, y = y, fill = Group), show.legend = FALSE)
p <- p + ggplot2::scale_fill_manual(values = color.plot, guide = FALSE)
p <- p + ggplot2::geom_raster(data = base.map, ggplot2::aes(x = x, y = y, fill = MAP),
show.legend = FALSE, fill = land.col)
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
p <- p + ggplot2::labs(x = "Longitude", y = "Latitude", fill = "Group", title = paste(groups, collapse = " and "))
# Add stations
if (stations) {
p <- p + ggplot2::geom_point(data = input$spatial$stations, color = "white", fill = "black", shape = 21, size = 1.5,
ggplot2::aes(x = Longitude, y = Latitude))
}
# Add title
if (!is.null(main)) {
p <- p + ggplot2::labs(title = main)
}
return(p)
})
names(the.plots) <- names(overlap.raster)
# plot everything in different windows
# lapply(the.plots, function(p) {
#   dev.new()
#   print(p)
# })
# return all plots
if (store)
return(the.plots)
}
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
plot.save[[1]]
dev.off()
sink()
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
plot.save[[1]]
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = 2)
ggplot2::ggsave(paste0("Overlap GIF/Fig", i, ".png"), plot = plot.save[[2]], width = 12, height = 11, units ="cm", dpi = 300)
plot.save[[2]]
for (i in 1:length(index)) {
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
if (length(plot.save) > 0) {
ggplot2::ggsave(paste0("Overlap GIF/Fig", i, ".png"), plot = plot.save[[1]], width = 11, height = 11, units ="cm", dpi = 300)
} else {
plot.save <- plotGIF(input = dbbmm_time, main = aux, store = TRUE, stations = FALSE, timeslot = 2)
ggplot2::ggsave(paste0("Overlap GIF/Fig", i, ".png"), plot = plot.save[[2]], width = 11, height = 11, units ="cm", dpi = 300)
}
}
dbbmm_time <- dynBBMM(input = rsp.data, UTM.zone = 56, breaks = c(0.5, 0.95), timeframe = 24, debug = TRUE)
index <- which(dbbmm_time$timeslots[, 4] == TRUE &
dbbmm_time$timeslots[, 5] == TRUE)
index
install.packages("ImageMagick")
library(ImageMagick)
install.packages("caTools")
system("/Overlap GIF")
getwd()
system("Overlap GIF")
?system
plot.save <- plotGIF(input = dbbmm_time, level = .99, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
dbbmm_time <- dynBBMM(input = rsp.data, UTM.zone = 56, breaks = c(0.5, 0.99), timeframe = 12, debug = TRUE)
index <- which(dbbmm_time$timeslots[, 4] == TRUE &
dbbmm_time$timeslots[, 5] == TRUE)
index
dbbmm_time <- dynBBMM(input = rsp.data, UTM.zone = 56, breaks = c(0.5, 0.95), timeframe = 12, debug = TRUE)
index <- which(dbbmm_time$timeslots[, 4] == TRUE &
dbbmm_time$timeslots[, 5] == TRUE)
index
index2 <- 494:534
index3 <- 536:545
index4 <- 300:485
index <- sort(c(index, index2, index3, index4))
index
for (i in 1:length(index)) {
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, level = .99, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
if (length(plot.save) > 0) {
ggplot2::ggsave(paste0("Overlap GIF_12h-99/Fig", i, ".png"), plot = plot.save[[1]], width = 11, height = 11, units ="cm", dpi = 300)
} else {
plot.save <- plotGIF(input = dbbmm_time, level = .99, main = aux, store = TRUE, stations = FALSE, timeslot = 2)
ggplot2::ggsave(paste0("Overlap GIF/Fig", i, ".png"), plot = plot.save[[2]], width = 11, height = 11, units ="cm", dpi = 300)
}
}
for (i in 1:length(index)) {
aux <- as.character(dbbmm_time$timeslots$start[dbbmm_time$timeslots$slot == index[i]])
if(nchar(aux) == 10) {
aux <- paste0(aux, " 00:00:00")
}
plot.save <- plotGIF(input = dbbmm_time, level = .95, main = aux, store = TRUE, stations = FALSE, timeslot = index[i])
if (length(plot.save) > 0) {
ggplot2::ggsave(paste0("Overlap GIF_12h-99/Fig", i, ".png"), plot = plot.save[[1]], width = 11, height = 11, units ="cm", dpi = 300)
} else {
plot.save <- plotGIF(input = dbbmm_time, level = .95, main = aux, store = TRUE, stations = FALSE, timeslot = 2)
ggplot2::ggsave(paste0("Overlap GIF/Fig", i, ".png"), plot = plot.save[[2]], width = 11, height = 11, units ="cm", dpi = 300)
}
}
df <- dbbmm_time$track.areas$Bream
View(df)
View(df)
df <- dbbmm_time$track.areas$Bream
df$Month <- as.numeric(substr(df$start, 6, 7))
df$Month <- as.numeric(substr(df$Start, 6, 7))
summary(df)
boxplot(df$area.5 ~ df$Month)
boxplot(df$area.95 ~ df$Month)
df <- dbbmm_time$track.areas$Bream
df$Month <- as.numeric(substr(df$Start, 6, 7))
df$SPP <- "Bream"
df1 <- dbbmm_time$track.areas$Luderick
df1$Month <- as.numeric(substr(df1$Start, 6, 7))
df1$SPP <- "Luderick"
df2 <- dbbmm_time$track.areas$Tarwhine
df2$Month <- as.numeric(substr(df2$Start, 6, 7))
df2$SPP <- "Tarwhine"
df <- rbind(df, df1, df2)
rm(df1, df2)
summary(df)
summary(as.factor(df$SPP))
ggplot() +
geom_histogram(data = df, aes(x = Month, y = area.5, fill = SPP))
library(ggplot2)
ggplot() +
geom_histogram(data = df, aes(x = Month, y = area.5, fill = SPP))
?geom_histogram()
ggplot() +
geom_boxplot(data = df, aes(x = Month, y = area.5, fill = SPP))
ggplot() +
geom_boxplot(data = df, aes(x = as.factor(Month), y = area.5, fill = SPP))
ggplot() +
geom_boxplot(data = df, aes(x = as.factor(Month), y = area.5, fill = SPP)) +
theme_bw()
df <- dbbmm_time$track.areas$Bream
df$Month <- as.numeric(substr(df$Start, 6, 7))
df$Group <- "Bream"
df1 <- dbbmm_time$track.areas$Luderick
df1$Month <- as.numeric(substr(df1$Start, 6, 7))
df1$Group <- "Luderick"
df2 <- dbbmm_time$track.areas$Tarwhine
df2$Month <- as.numeric(substr(df2$Start, 6, 7))
df2$Group <- "Tarwhine"
df <- rbind(df, df1, df2)
rm(df1, df2)
ggplot() +
geom_boxplot(data = df, aes(x = as.factor(Month), y = area.5, fill = Group)) +
theme_bw()
ggplot() +
geom_boxplot(data = df, aes(x = as.factor(Month), y = area.5, fill = Group)) +
theme_bw() + labs(x = "Month", y = "Area 50% (m2)")
