#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=as.POSIXct(muleys$GPSFixTime,
format="%Y.%m.%d %H:%M:%S"), proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
class(muleys$id)
class(df.aux$Standard.Name)
class(df.aux$Transmitter)
summary(df.aux$Transmitter)
summary(muleys$id)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
summary(df.aux)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
df.aux$Transmitter
summary(df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
#Sort data to address error in code
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?move
as.POSIXct(muleys$GPSFixTime,
format="%Y.%m.%d %H:%M:%S")
head(df.aux$Date.time.local)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = as.POSIXct(df.aux$Date.time.local),
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
as.POSIXct(df.aux$Date.time.local)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = as.POSIXct(df.aux$Date.time.local),
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?CRS
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = rgdal::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(df.aux)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
#or select a single deer
dataD8 <- subset(muleys, muleys$id == "D8")
dataD8$id <- droplevels.factor(dataD8$id)
#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT, proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
plot(two_dbbmm)
class(muleys$id)
summary(muleys$id)
summary(muleys$id)
summary(df.aux)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
df.aux <- get(spp.df[i])
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?any
summary(df.aux$Transmitter)
889+904
row.names(df.aux)
row.names(df.aux)[length(row.names(df.aux))]
row.names(df.aux) <- c(1:1793)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
class(df.aux$Transmitter)
class(df.aux$Date.time.local)
class(muleys$DT)
df.aux$X
df.aux$Y
summary(df.aux)
paste0("+proj=utm +zone=", zone, " +datum=NAD83")
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(muleys$id)
101+968
summary(df.aux$Transmitter)
889+904
length(df.aux$Date.time.local)
which(is.na(df.aux$Date.time.local) == T)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#------------------------------------------------------------------------#
# Test algorithm ####
#-------------------#
source("spbdFunctions.R")
# Limfjord area:
setwd("Limfjord_tester")
output <- spbdRun(transition.layer = "Limfjord_raster.grd", tz.study.area = "CET")
#' Convert Coordinate Reference System (CRS) from decimal degrees (WGS 84) to
#' the UTM projection and meter units, as required by the Brownian Bridge
#' Movement Model algorithm.
#'
#' @param x Vector of Longitudes in decimal degrees.
#' @param y Vector of Latitudes in decimal degrees.
#' @param zone UTM zone of input locations.
#'
#' @return Dataframe with the converted coordinates.
#'
LonLatToUTM <- function(x, y, zone) {
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS("+proj=longlat +datum=WGS84")  ## for example
res <- sp::spTransform(xy, sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83 +units=m +no_defs")))
return(as.data.frame(res))
}
df <- output
zone <- 32 # Denmark UTM zone
raster.layer <- "Limfjord_raster.grd"
time.int <- 3
Transmitters <- NULL
Transmitters <- c("R64K-4075","R64K-4080") # Analyze specific Transmitters
i <- 1
# EXCLUDE: TESTING ALGO!
i
# Select specific transmitters to analyze
if (is.null(Transmitters) == F) {
total.transmitters <- names(output)
index <- which(total.transmitters %in% Transmitters)
output <- output[index]
}
# Split SPBD output by species
transmitter.aux <- names(output)
signal.aux <- strsplit(transmitter.aux, "-")
signal.save <- NULL
for (i in 1:length(transmitter.aux)) {
aux <- signal.aux[[i]][length(signal.aux[[i]])]
signal.save <- c(signal.save, aux)
}
df.signal <- data.frame(Transmitter = transmitter.aux,
Signal = signal.save)
df.bio <- read.csv("biometrics.csv") # YN: Or is there another way of calling biometrics file from actel?
df.signal$Group <- NA
for (i in 1:nrow(df.signal)) {
df.signal$Group[i] <- as.character(df.bio$Group[df.bio$Signal == df.signal$Signal[i]])
}
# Separate SBPD output into species-specific dataframes:
spp <- unique(df.signal$Group)
spp.df <- NULL # Vector of species-specific datasets to generate
for (i in 1:length(spp)) {
transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(output) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)) {
aux2 <- output[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save) # Species-specific dataframe
spp.df <- c(spp.df, paste0("df_", spp[i])) # Vector of dataframe names
}
df.aux <- get(spp.df[i])
View(df.aux)
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
setwd("/Users/yuriniella/Documents/GitHub/SPBDestimate/")
muleys <-read.csv("muleysexample.csv")
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
str(muleys)
#TIME DIFF ONLY NECESSARY AS A MEANS EXCLUDE POOR DATA LATER
muleys$Date <- as.numeric(muleys$GPSFixTime)
timediff <- diff(muleys$Date)*24*60
muleys <-muleys[-1,]
muleys$timediff <-as.numeric(abs(timediff))
#FOR ALL DEER
muleys$DT <-as.POSIXct(strptime(muleys$GPSFixTime, format='%Y.%m.%d %H:%M:%OS'))
muleys$DT
#Sort data to address error in code
muleys <- muleys[order(muleys$id,muleys$DT),]
summary(muleys$id)
#EXCLUDE OUTLIERS AND POOR DATA FIXES
newmuleys <-subset(muleys, muleys$Long > -110.90 & muleys$Lat > 37.80)
muleys <- newmuleys
newmuleys <-subset(muleys, muleys$Long < -107)
muleys <- newmuleys
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
debugSource('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#--------------------------------------#
# Testing the code and plotting graphs #
#--------------------------------------#
source("SPBD_Functions.R")
source("dynBBMM_Functions.R")
source("SPBD_Functions.R") # YN: Wrapper functions moved to this file!
source("dynBBMM_Functions.R")
#--------------------------#
# Test for the Limfjord ####
#--------------------------#
setwd("Limfjord_tester")
output <- SPBDrun(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
time.lapse = 10, time.lapse.rec = 10)
output250 <- SPBDrun.dist(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
distance = 250, time.lapse = 10)
output500 <- SPBDrun.dist(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
distance = 500, time.lapse = 10)
output1000 <- SPBDrun.dist(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
distance = 1000, time.lapse = 10)
# Obtain track metadata:
df.track1 <- dBBMM1[[2]]
## 1. Total dBBMM:
dBBMM1 <- SPBDynBBMM(output, tz.study.area = "CET", zone = 32, SPBD.raster = "Limfjord_raster.grd")
#' Calculates dynamic Brownian Bridge Movement Model (dBBMM) for each track and transmitter.
#'
#' @param input List of fixed tracks as returned by SPBD.
#' @param tz.study.area Timezone of the study area.
#' @param zone UTM zone of study area.
#' @param Transmitters Vector of Transmitters to be analyzed. By default, all animals in the SPBD will be analised.
#' @param SPBD.raster Path to the raster file of the study area.
#'
#' @return List with dBBMM per group.
#'
SPBDynBBMM <- function(input, tz.study.area, zone, Transmitters = NULL, SPBD.raster) {
# Select specific transmitters to analyze
if (is.null(Transmitters) == FALSE) {
total.transmitters <- names(input)
index <- which(total.transmitters %in% Transmitters)
input <- input[index]
} else {
actel:::appendTo(c("Screen", "Report"),
"M: No specific transmitters selected. All detected will be used for analysis.")
}
# Raster of study area as UTM: to be used for the dBBMM
raster.aux <- raster::raster(SPBD.raster)
raster::crs(raster.aux) <- "+proj=longlat +datum=WGS84" # Base raster in lonlat CRS
raster.aux <- raster::projectRaster(from = raster.aux,  # Converto to UTM
crs = paste0("+proj=utm +zone=", zone, " +units=m +ellps=WGS84"))
# Split transmitters per group variable
transmitter.aux <- names(input)
signal.aux <- strsplit(transmitter.aux, "-")
signal.save <- NULL
for (i in 1:length(transmitter.aux)) {
aux <- signal.aux[[i]][length(signal.aux[[i]])]
signal.save <- c(signal.save, aux)
}
df.signal <- data.frame(Transmitter = transmitter.aux,
Signal = signal.save)
df.bio <- actel:::loadBio(file = "biometrics.csv")
df.signal$Group <- NA_character_
for (i in 1:nrow(df.signal)) {
df.signal$Group[i] <- as.character(df.bio$Group[df.bio$Signal == df.signal$Signal[i]])
}
spp <- unique(df.signal$Group)
spp.df <- NULL # Auxiliar object with group-specific dataset names (to be used bellow)
for (i in 1:length(spp)) {
transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(input) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)) {
aux2 <- input[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save) # Species-specific dataframe
spp.df <- c(spp.df, paste0("df_", spp[i])) # Vector of dataframe names
}
# Empty auxiliary files to save outputs
good.group <- NULL
good.track <- NULL
good.initial <- NULL
good.final <- NULL
dbbmm.df <- NULL # Auxiliar to save output names
# Calculate dBBMM per group:
for (i in 1:length(spp.df)) {
df.aux <- get(spp.df[i]) # Use auxiliar object!
# Calculate BBMM for each animal + track!
df.aux$ID <- paste0(df.aux$Transmitter, "_", df.aux$Track)
# Get coordinates in UTM
df.aux$X <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)[ , 2]
df.aux$Y <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)[ , 3]
# Identify and remove duplicated timestamps: simultaneous detections at multiple receivers!
index <- which(duplicated(df.aux$Date.time.local) == TRUE)
# Remove second duplicated detection (time lapse = 0)
if (length(index) > 0) {
df.aux <- df.aux[-index, ]
actel:::appendTo(c("Report"),
paste("W:", index, "individual locations were removed due to simultaneous detections at two receivers."))
}
## Exclude tracks shorter than 30 minutes:
bad.track <- NULL
tot.track <- unique(df.aux$ID)
for (ii in 1:length(tot.track)) {
aux <- subset(df.aux, ID == tot.track[ii])
time.int <- as.numeric(difftime(aux$Date.time.local[nrow(aux)], aux$Date.time.local[1], units = "min"))
if (time.int < 30) {
bad.track <- c(bad.track, as.character(tot.track[ii]))
} else { # Save good track statistics to return as an output
good.group <- c(good.group, as.character(spp[i]))
good.track <- c(good.track, as.character(tot.track[ii]))
good.initial <- c(good.initial, as.character(aux$Date.time.local[1]))
good.final <- c(good.final, as.character(aux$Date.time.local[nrow(aux)]))
}
}
index <- which(df.aux$ID %in% bad.track)
if (length(index) > 0) {
df.aux <- df.aux[-index, ]
}
df.aux$ID <- as.factor(paste(df.aux$ID))
# Create a move object for all animals together:
loc <- move::move(x = df.aux$X, y = df.aux$Y, time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone,
" +units=m +ellps=WGS84")),
animal = df.aux$ID)
# Calculate dynamic Brownian Bridge Movement Model:
actel:::appendTo("Screen",
paste("M: Calculating dBBMM:",
crayon::bold(crayon::green((paste(strsplit(spp.df[i], "_")[[1]][2]))))))
pkgcond::suppress_messages(mod_dbbmm <- move::brownian.bridge.dyn(object = loc,
raster = raster.aux,
window.size = 7, margin = 3,
location.error = df.aux$Error),
pattern = "Computational size:")
# Save model as standardized areas of usage (50% and 95%):
assign(x = paste0("dBBMM_", spp[i]),
value = move::getVolumeUD(mod_dbbmm)) # Standardized areas!
dbbmm.df <- c(dbbmm.df, paste0("dBBMM_", spp[i])) # Vector of dataframe names
}
# Save good track info
Track.info <- data.frame(Group = good.group,
Track = good.track,
Initial = as.character(good.initial),
Final = as.character(good.final))
Track.info$Initial <- as.POSIXct(Track.info$Initial, tz = tz.study.area)
Track.info$Final <- as.POSIXct(Track.info$Final, tz = tz.study.area)
Track.info$Time.lapse.min <- as.numeric(difftime(time1 = Track.info$Final,
time2 = Track.info$Initial,
units = "mins"))
# Save output as a list:
dBBMM <- mget(dbbmm.df)
dBBMM <- list(dBBMM, Track.info)
names(dBBMM) <- c("Total dBBMM", "Track.info")
return(dBBMM)
}
## 1. Total dBBMM:
dBBMM1 <- SPBDynBBMM(output, tz.study.area = "CET", zone = 32, SPBD.raster = "Limfjord_raster.grd")
# Obtain track metadata:
df.track1 <- dBBMM1[[2]]
View(df.track1)
plot.dBBMM(dBBMM1, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "SPBD",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
dBBMM2 <- SPBDynBBMM(output250, tz.study.area = "CET", zone = 32, SPBD.raster = "Limfjord_raster.grd")
dBBMM3 <- SPBDynBBMM(output500, tz.study.area = "CET", zone = 32, SPBD.raster = "Limfjord_raster.grd")
dBBMM4 <- SPBDynBBMM(output1000, tz.study.area = "CET", zone = 32, SPBD.raster = "Limfjord_raster.grd")
par(mfrow = c(2, 2))
plot.dBBMM(dBBMM1, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "SPBD",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
plot.dBBMM(dBBMM2, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "250 m",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
plot.dBBMM(dBBMM3, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "500 m",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
plot.dBBMM(dBBMM4, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "1000 m",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
## 2. Fine-scale dBBMM:
dBBMM.fine <- SPBDynBBMM.fine(output, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
rm(dBBMM.fine)
## 2. Fine-scale dBBMM:
dBBMM.fine1 <- SPBDynBBMM.fine(output, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
dBBMM.fine2 <- SPBDynBBMM.fine(output250, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
dBBMM.fine3 <- SPBDynBBMM.fine(output500, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
dBBMM.fine4 <- SPBDynBBMM.fine(output1000, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
View(df.track1)
## 2. Fine-scale dBBMM:
dBBMM.fine1 <- SPBDynBBMM.fine(output, tz.study.area = "CET", zone = 32, timeframe = 6,
SPBD.raster = "Limfjord_raster.grd")
plot.dBBMM(dBBMM1, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "SPBD",
SPBD.raster = "Limfjord_raster.grd", level1 = .5, level2 = .95)
plot.dBBMM(dBBMM1, group = "Brown Trout1", Track = "R64K.4075_Track_8", main = "SPBD",
SPBD.raster = "Limfjord_raster.grd", level1 = .20, level2 = .99)
# Retreive fine-scale data:
df.fine1 <- dBBMM.fine1[[1]]
View(df.fine1)
View(dBBMM.fine1)
