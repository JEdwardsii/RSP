transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(output) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)){
aux2 <- output[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save)
spp.df <- c(spp.df, paste0("df_", spp[i]), value = df.save))
}
paste0("df_", spp[i])
# Separate SBPD output into species-specific dataframes:
spp <- unique(df.signal$Group)
spp.df <- NULL # Vector of species-specific datasets to generate
for (i in 1:length(spp)) {
transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(output) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)) {
aux2 <- output[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save)
spp.df <- c(spp.df, paste0("df_", spp[i]))
}
spp.df
View(`df_Brown Trout`)
summary(`df_Brown Trout`)
i <- 1
df.aux <- get(spp.df[i])
View(df.aux)
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df$X <- df.UTM$X
df$Y <- df.UTM$Y
rm(df.UTM)
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
View(df.aux)
summary(df.aux)
setwd("/Users/yuriniella/Documents/GitHub/SPBDestimate/")
muleys <-read.csv("muleysexample.csv")
str(muleys)
#TIME DIFF ONLY NECESSARY AS A MEANS EXCLUDE POOR DATA LATER
muleys$Date <- as.numeric(muleys$GPSFixTime)
timediff <- diff(muleys$Date)*24*60
muleys <-muleys[-1,]
muleys$timediff <-as.numeric(abs(timediff))
#FOR ALL DEER
muleys$DT <-as.POSIXct(strptime(muleys$GPSFixTime, format='%Y.%m.%d %H:%M:%OS'))
muleys$DT
#Sort data to address error in code
muleys <- muleys[order(muleys$id,muleys$DT),]
summary(muleys$id)
#EXCLUDE OUTLIERS AND POOR DATA FIXES
newmuleys <-subset(muleys, muleys$Long > -110.90 & muleys$Lat > 37.80)
muleys <- newmuleys
newmuleys <-subset(muleys, muleys$Long < -107)
muleys <- newmuleys
View(muleys)
?proj
class(df.aux$Date.time.local)
?CRS
zone
paste0("+proj=utm +zone=", zone, " +datum=NAD83")
#Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=as.POSIXct(muleys$GPSFixTime,
format="%Y.%m.%d %H:%M:%S"), proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
library(move)
library(sp)
library(move)
#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=as.POSIXct(muleys$GPSFixTime,
format="%Y.%m.%d %H:%M:%S"), proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
class(muleys$id)
class(df.aux$Standard.Name)
class(df.aux$Transmitter)
summary(df.aux$Transmitter)
summary(muleys$id)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
summary(df.aux)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
df.aux$Transmitter
summary(df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
#Sort data to address error in code
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?move
as.POSIXct(muleys$GPSFixTime,
format="%Y.%m.%d %H:%M:%S")
head(df.aux$Date.time.local)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = as.POSIXct(df.aux$Date.time.local),
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
as.POSIXct(df.aux$Date.time.local)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = as.POSIXct(df.aux$Date.time.local),
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?CRS
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = rgdal::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(df.aux)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
#or select a single deer
dataD8 <- subset(muleys, muleys$id == "D8")
dataD8$id <- droplevels.factor(dataD8$id)
#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT, proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
plot(two_dbbmm)
class(muleys$id)
summary(muleys$id)
summary(muleys$id)
summary(df.aux)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
df.aux <- get(spp.df[i])
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?any
summary(df.aux$Transmitter)
889+904
row.names(df.aux)
row.names(df.aux)[length(row.names(df.aux))]
row.names(df.aux) <- c(1:1793)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
class(df.aux$Transmitter)
class(df.aux$Date.time.local)
class(muleys$DT)
df.aux$X
df.aux$Y
summary(df.aux)
paste0("+proj=utm +zone=", zone, " +datum=NAD83")
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(muleys$id)
101+968
summary(df.aux$Transmitter)
889+904
length(df.aux$Date.time.local)
which(is.na(df.aux$Date.time.local) == T)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#------------------------------------------------------------------------#
# Test algorithm ####
#-------------------#
source("spbdFunctions.R")
# Limfjord area:
setwd("Limfjord_tester")
output <- spbdRun(transition.layer = "Limfjord_raster.grd", tz.study.area = "CET")
#' Convert Coordinate Reference System (CRS) from decimal degrees (WGS 84) to
#' the UTM projection and meter units, as required by the Brownian Bridge
#' Movement Model algorithm.
#'
#' @param x Vector of Longitudes in decimal degrees.
#' @param y Vector of Latitudes in decimal degrees.
#' @param zone UTM zone of input locations.
#'
#' @return Dataframe with the converted coordinates.
#'
LonLatToUTM <- function(x, y, zone) {
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS("+proj=longlat +datum=WGS84")  ## for example
res <- sp::spTransform(xy, sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83 +units=m +no_defs")))
return(as.data.frame(res))
}
df <- output
zone <- 32 # Denmark UTM zone
raster.layer <- "Limfjord_raster.grd"
time.int <- 3
Transmitters <- NULL
Transmitters <- c("R64K-4075","R64K-4080") # Analyze specific Transmitters
i <- 1
# EXCLUDE: TESTING ALGO!
i
# Select specific transmitters to analyze
if (is.null(Transmitters) == F) {
total.transmitters <- names(output)
index <- which(total.transmitters %in% Transmitters)
output <- output[index]
}
# Split SPBD output by species
transmitter.aux <- names(output)
signal.aux <- strsplit(transmitter.aux, "-")
signal.save <- NULL
for (i in 1:length(transmitter.aux)) {
aux <- signal.aux[[i]][length(signal.aux[[i]])]
signal.save <- c(signal.save, aux)
}
df.signal <- data.frame(Transmitter = transmitter.aux,
Signal = signal.save)
df.bio <- read.csv("biometrics.csv") # YN: Or is there another way of calling biometrics file from actel?
df.signal$Group <- NA
for (i in 1:nrow(df.signal)) {
df.signal$Group[i] <- as.character(df.bio$Group[df.bio$Signal == df.signal$Signal[i]])
}
# Separate SBPD output into species-specific dataframes:
spp <- unique(df.signal$Group)
spp.df <- NULL # Vector of species-specific datasets to generate
for (i in 1:length(spp)) {
transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(output) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)) {
aux2 <- output[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save) # Species-specific dataframe
spp.df <- c(spp.df, paste0("df_", spp[i])) # Vector of dataframe names
}
df.aux <- get(spp.df[i])
View(df.aux)
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
setwd("/Users/yuriniella/Documents/GitHub/SPBDestimate/")
muleys <-read.csv("muleysexample.csv")
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
str(muleys)
#TIME DIFF ONLY NECESSARY AS A MEANS EXCLUDE POOR DATA LATER
muleys$Date <- as.numeric(muleys$GPSFixTime)
timediff <- diff(muleys$Date)*24*60
muleys <-muleys[-1,]
muleys$timediff <-as.numeric(abs(timediff))
#FOR ALL DEER
muleys$DT <-as.POSIXct(strptime(muleys$GPSFixTime, format='%Y.%m.%d %H:%M:%OS'))
muleys$DT
#Sort data to address error in code
muleys <- muleys[order(muleys$id,muleys$DT),]
summary(muleys$id)
#EXCLUDE OUTLIERS AND POOR DATA FIXES
newmuleys <-subset(muleys, muleys$Long > -110.90 & muleys$Lat > 37.80)
muleys <- newmuleys
newmuleys <-subset(muleys, muleys$Long < -107)
muleys <- newmuleys
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
debugSource('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#--------------------------------------#
# Testing the code and plotting graphs #
#--------------------------------------#
source("SPBD_Functions.R")
source("dynBBMM_Functions.R")
## Loading functions
source("SPBD_Functions.R") # YN: Wrapper functions moved to this file!
source("dynBBMM_Functions.R")
source("SPBD_Functions.R") # YN: Wrapper functions moved to this file!
source("dynBBMM_Functions.R")
output500 <- SPBDrun.dist(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
distance = 500, time.lapse = 10)
library(actel)
source("RSP.R")
source("dynBBMM.R")
reload <- function(){
source("../RSP.R")
source("../dynBBMM.R")
}
dataToList <- function(source){
e <- new.env()
load(source, envir = e)
return(as.list(e))
}
#--------------------------#
# Test for the Limfjord ####
#--------------------------#
setwd("Limfjord_tester")
# process study data using actel
study.data <- explore(tz.study.area = "Europe/Copenhagen", report = FALSE)
# calculate RSP
rsp.data <- RSP(input = study.data, base.raster = "Limfjord_raster.grd", time.lapse = 30)
# Animate output with moveVis:
df <- rsp.data$detections$`R64K-4138`
df <- subset(df, Track == "Track_7")
df2 <- subset(df, Position == "Receiver") # Only receiver locations
df2 <- subset(df2, Track == "Track_7")     # Select only Track_7
## Gif
library(dplyr)
library(ggplot2)
library(magick)
library(gganimate)
library(ggmap)
# Limfjord map:
register_google(key = "AIzaSyCTGTQeSb2lyByt_Nk0gnDheX2pIjw8yiA")
map_ocean <- get_map(location = c(lon = 9.331480, lat = 56.817977),
zoom = 8, maptype = 'satellite')
# Receiver
map_plot1 <- ggmap(map_ocean) +
labs(x = "Lon", y = "Lat", title = "R64K-4138_Track_7 (Receiver)") +
geom_point(data = df2, aes(x = Longitude, y = Latitude), size = 1.5, col = "white") +
ylim(56.5, 57.1) + xlim(8.7, 10.4)
anim1 <- map_plot1 +
transition_time(df2$Timestamp) +
shadow_wake(wake_length = 0.2, alpha = TRUE)
# RSP
map_plot2 <- ggmap(map_ocean) +
labs(x = "Lon", y = "Lat", title = "R64K-4138_Track_7_RSP") +
geom_point(data = df, aes(x = Longitude, y = Latitude), size = 1.5, col = "yellow") +
ylim(56.5, 57.1) + xlim(8.7, 10.4)
anim2 <- map_plot2 +
transition_time(df$Timestamp) +
shadow_wake(wake_length = 0.2, alpha = TRUE)
# Create GIF:
gif1 <- animate(anim1, width = 500, height = 500)
gif2 <- animate(anim2, width = 500, height = 500)
a_mgif <- image_read(gif1)
b_mgif <- image_read(gif2)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:100){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
image_write(new_gif, path = "animationRSP.gif")
# Animate output with moveVis:
df <- rsp.data$detections$`R64K-4138`
df <- subset(df, Track == "Track_7")
df2 <- subset(df, Position == "Receiver") # Only receiver locations
df2 <- subset(df2, Track == "Track_7")     # Select only Track_7
## Gif
library(dplyr)
library(ggplot2)
library(magick)
library(gganimate)
library(ggmap)
# Limfjord map:
register_google(key = "AIzaSyCTGTQeSb2lyByt_Nk0gnDheX2pIjw8yiA")
map_ocean <- get_map(location = c(lon = 9.331480, lat = 56.817977),
zoom = 8, maptype = 'satellite')
# Receiver
map_plot1 <- ggmap(map_ocean) +
labs(x = "Lon", y = "Lat", title = "R64K-4138_Track_7 (Receiver)") +
geom_point(data = df2, aes(x = Longitude, y = Latitude), size = 1.5, col = "white") +
ylim(56.5, 57.1) + xlim(8.7, 10.4)
anim1 <- map_plot1 +
transition_time(df2$Timestamp) +
shadow_wake(wake_length = 0.2, alpha = TRUE)
# RSP
map_plot2 <- ggmap(map_ocean) +
labs(x = "Lon", y = "Lat", title = "R64K-4138_Track_7 (RSP)") +
geom_point(data = df, aes(x = Longitude, y = Latitude), size = 1.5, col = "yellow") +
ylim(56.5, 57.1) + xlim(8.7, 10.4)
anim2 <- map_plot2 +
transition_time(df$Timestamp) +
shadow_wake(wake_length = 0.2, alpha = TRUE)
# Create GIF:
gif1 <- animate(anim1, width = 500, height = 500)
gif2 <- animate(anim2, width = 500, height = 500)
a_mgif <- image_read(gif1)
b_mgif <- image_read(gif2)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:100){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
image_write(new_gif, path = "animationRSP.gif")
