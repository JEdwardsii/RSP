proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?CRS
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = rgdal::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(df.aux)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
#or select a single deer
dataD8 <- subset(muleys, muleys$id == "D8")
dataD8$id <- droplevels.factor(dataD8$id)
#Create a move object for all deer using the Move package
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT, proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
#Now create a dBBMM object
two_dbbmm <- brownian.bridge.dyn(object=loc, location.error=22, window.size=19, margin=7,  dimSize=100,time.step=180)
plot(two_dbbmm)
plot(two_dbbmm)
class(muleys$id)
summary(muleys$id)
summary(muleys$id)
summary(df.aux)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
df.aux <- get(spp.df[i])
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
?any
summary(df.aux$Transmitter)
889+904
row.names(df.aux)
row.names(df.aux)[length(row.names(df.aux))]
row.names(df.aux) <- c(1:1793)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
class(df.aux$Transmitter)
class(df.aux$Date.time.local)
class(muleys$DT)
df.aux$X
df.aux$Y
summary(df.aux)
paste0("+proj=utm +zone=", zone, " +datum=NAD83")
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
source('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
summary(muleys$id)
101+968
summary(df.aux$Transmitter)
889+904
length(df.aux$Date.time.local)
which(is.na(df.aux$Date.time.local) == T)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#------------------------------------------------------------------------#
# Test algorithm ####
#-------------------#
source("spbdFunctions.R")
# Limfjord area:
setwd("Limfjord_tester")
output <- spbdRun(transition.layer = "Limfjord_raster.grd", tz.study.area = "CET")
#' Convert Coordinate Reference System (CRS) from decimal degrees (WGS 84) to
#' the UTM projection and meter units, as required by the Brownian Bridge
#' Movement Model algorithm.
#'
#' @param x Vector of Longitudes in decimal degrees.
#' @param y Vector of Latitudes in decimal degrees.
#' @param zone UTM zone of input locations.
#'
#' @return Dataframe with the converted coordinates.
#'
LonLatToUTM <- function(x, y, zone) {
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS("+proj=longlat +datum=WGS84")  ## for example
res <- sp::spTransform(xy, sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83 +units=m +no_defs")))
return(as.data.frame(res))
}
df <- output
zone <- 32 # Denmark UTM zone
raster.layer <- "Limfjord_raster.grd"
time.int <- 3
Transmitters <- NULL
Transmitters <- c("R64K-4075","R64K-4080") # Analyze specific Transmitters
i <- 1
# EXCLUDE: TESTING ALGO!
i
# Select specific transmitters to analyze
if (is.null(Transmitters) == F) {
total.transmitters <- names(output)
index <- which(total.transmitters %in% Transmitters)
output <- output[index]
}
# Split SPBD output by species
transmitter.aux <- names(output)
signal.aux <- strsplit(transmitter.aux, "-")
signal.save <- NULL
for (i in 1:length(transmitter.aux)) {
aux <- signal.aux[[i]][length(signal.aux[[i]])]
signal.save <- c(signal.save, aux)
}
df.signal <- data.frame(Transmitter = transmitter.aux,
Signal = signal.save)
df.bio <- read.csv("biometrics.csv") # YN: Or is there another way of calling biometrics file from actel?
df.signal$Group <- NA
for (i in 1:nrow(df.signal)) {
df.signal$Group[i] <- as.character(df.bio$Group[df.bio$Signal == df.signal$Signal[i]])
}
# Separate SBPD output into species-specific dataframes:
spp <- unique(df.signal$Group)
spp.df <- NULL # Vector of species-specific datasets to generate
for (i in 1:length(spp)) {
transmitter.aux <- as.character(df.signal$Transmitter[df.signal$Group == spp[i]])
aux <- which(names(output) == transmitter.aux)
df.save <- NULL
for(ii in 1:length(aux)) {
aux2 <- output[[aux[ii]]]
df.save <- rbind(df.save, aux2)
}
assign(x = paste0("df_", spp[i]), value = df.save) # Species-specific dataframe
spp.df <- c(spp.df, paste0("df_", spp[i])) # Vector of dataframe names
}
df.aux <- get(spp.df[i])
View(df.aux)
# Convert CRS from WGS84 to UTM
df.UTM <- LonLatToUTM(df.aux$Longitude, df.aux$Latitude, zone)
df.aux$X <- df.UTM$X
df.aux$Y <- df.UTM$Y
rm(df.UTM)
# Exclude missing factors
df.aux$Transmitter <- as.character(df.aux$Transmitter)
df.aux$Transmitter <- as.factor(df.aux$Transmitter)
# Sort data
df.aux <- df.aux[order(df.aux$Transmitter, df.aux$Date.time.local),]
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
loc <- move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
setwd("/Users/yuriniella/Documents/GitHub/SPBDestimate/")
muleys <-read.csv("muleysexample.csv")
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
str(muleys)
#TIME DIFF ONLY NECESSARY AS A MEANS EXCLUDE POOR DATA LATER
muleys$Date <- as.numeric(muleys$GPSFixTime)
timediff <- diff(muleys$Date)*24*60
muleys <-muleys[-1,]
muleys$timediff <-as.numeric(abs(timediff))
#FOR ALL DEER
muleys$DT <-as.POSIXct(strptime(muleys$GPSFixTime, format='%Y.%m.%d %H:%M:%OS'))
muleys$DT
#Sort data to address error in code
muleys <- muleys[order(muleys$id,muleys$DT),]
summary(muleys$id)
#EXCLUDE OUTLIERS AND POOR DATA FIXES
newmuleys <-subset(muleys, muleys$Long > -110.90 & muleys$Lat > 37.80)
muleys <- newmuleys
newmuleys <-subset(muleys, muleys$Long < -107)
muleys <- newmuleys
loc <- move::move(x=muleys$X, y=muleys$Y, time=muleys$DT,
proj=sp::CRS("+proj=utm +zone=12 +datum=NAD83"),data=muleys,
animal=muleys$id)
## Create a move object for all animals combined
loc <- move::move(x = df.aux$X, y = df.aux$Y,
time = df.aux$Date.time.local,
proj = sp::CRS(paste0("+proj=utm +zone=", zone, " +datum=NAD83")),
data = df.aux, animal = df.aux$Transmitter)
debugSource('~/Documents/GitHub/SPBDestimate/spbd_space-model.R')
# Wrapper function
spbdRun <- function(transition.layer, tz.study.area) {
transition.layer <- SPBDraster(raster.hab = "Limfjord_raster.grd")
bio <- actel:::loadBio(file = "biometrics.csv")
spatial <- actel:::assembleSpatial(file = "spatial.csv", bio = bio, sections = NULL)
detections <- SPBDete(tz.study.area = tz.study.area, spatial = spatial)
recipient <- actel:::splitDetections(detections = detections, bio = bio, spatial = spatial)
detections.list <- recipient[[1]]
bio <- recipient[[2]]
rm(recipient)
detections.list <- lapply(detections.list, function(x){
x$Time.lapse.min <- c(0, as.numeric(difftime(x$Date.time.local[-1], x$Date.time.local[-nrow(x)], units = "mins")))
x$Longitude <- spatial$stations$Longitude[match(x$Receiver, spatial$stations$Receiver)]
x$Latitude <- spatial$stations$Latitude[match(x$Receiver, spatial$stations$Receiver)]
return(x)
})
print(system.time(output <- SPBD(df.detec = detections.list, tag = bio, r.path = transition.layer,
tz.study.area = tz.study.area, time.lapse = 10, time.lapse.rec = 10, er.ad = 20)))
return(output)
}
#--------------------------------------#
# Testing the code and plotting graphs #
#--------------------------------------#
source("SPBD_Functions.R")
source("dynBBMM_Functions.R")
## Loading functions
source("SPBD_Functions.R") # YN: Wrapper functions moved to this file!
source("dynBBMM_Functions.R")
source("SPBD_Functions.R") # YN: Wrapper functions moved to this file!
source("dynBBMM_Functions.R")
output500 <- SPBDrun.dist(SPBD.raster = "Limfjord_raster.grd", tz.study.area = "CET",
distance = 500, time.lapse = 10)
library(actel)
source("RSP.R")
source("dynBBMM.R")
reload <- function(){
source("../RSP.R")
source("../dynBBMM.R")
}
dataToList <- function(source){
e <- new.env()
load(source, envir = e)
return(as.list(e))
}
setwd("Limfjord_tester")
# process study data using actel
study.data <- explore(tz.study.area = "Europe/Copenhagen", report = FALSE)
rsp.data <- RSP(input = study.data, base.raster = "Limfjord_raster.grd", distance = 500, time.lapse = 30)
plotDistances(input = rsp.data)
plotDetections(input = rsp.data)
plotRSP(input = rsp.data, tag = "R64K-4075", display = "Both", type = "lines")
input = rsp.data
tag = "R64K-4075"
display = "Both"
type = "lines"
base.raster <- raster:::raster(input$base.raster, full.names = TRUE)
!file.exists(input$base.raster)
base.raster <- raster:::raster(input$base.raster, full.names = TRUE)
detections <- input$detections
if (is.na(match(tag, names(detections))))
stop("The requested tag is not present in the input detections.\n")
is.na(match(tag, names(detections)))
detections <- detections[[tag]]
display <- match.arg(display)
type <- match.arg(type)
df.rec <- subset(detections, Position == "Receiver") # Track dataset with only receiver positions
detections <- detections[[tag]]
detections
tag
detections <- input$detections
names(detections)
detections <- detections[tag]
detections
display <- match.arg(display)
display
type
df.rec <- subset(detections, Position == "Receiver") # Track dataset with only receiver positions
detections
subset(detections, Position == "Receiver")
class(detections$Positions)
class(detections$Position)
class(detections)
detections <- as.data.frame(detections)
detections
df.rec <- subset(detections, Position == "Receiver") # Track dataset with only receiver positions
class(detections$R64K.4075.Position)
?as.data.frame
base.raster <- raster:::raster(input$base.raster, full.names = TRUE)
detections <- input$detections
detections <- detections[tag]
detections <- as.data.frame(detections, check.names = FALSE)
head(detections)
detections <- input$detections
detections <- detections[tag]
detections <- as.data.frame(detections, optional = TRUE)
head(detections)
base.raster <- raster:::raster(input$base.raster, full.names = TRUE)
detections <- input$detections
colnames(detections)
names(detections)
View(detections)
detections <- detections[tag]
names(detections)
View(df.rec)
View(detections)
detections <- detections[[1]]
View(detections)
display <- match.arg(display)
display
df.rec <- subset(detections, Position == "Receiver") # Track dataset with only receiver positions
ddf.rec
df.rec
tracks <- unique(detections$Track) # Individual tracks
tracks
color.tracks <- grDevices::palette(rainbow(length(tracks))) # Color palette for plotting tracks!
color.tracks
base.raster_df <- raster::rasterToPoints(base.raster)
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = c(NA, "#BABCBF"))
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::theme(legend.position = "bottom")
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
p <- p + ggplot2::guides(colour = ggplot2::guide_legend(
title = paste0("Tracking period: ", min(detections$Date), " | ", max(detections$Date))))
if (display == "Receiver" | display == "Both") {
if (type == "lines")
p1 <- p + ggplot2::geom_path(data = df.rec, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
if (type == "points")
p1 <- p + ggplot2::geom_point(data = df.rec, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
p1 <- p1 + ggplot2::ggtitle(paste0(tag, ": Straight lines"))
}
if (display == "RSP" | display == "Both") {
if (type == "lines")
p2 <- p + ggplot2::geom_path(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
if (type == "points")
p2 <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
p2 <- p2 + ggplot2::ggtitle(paste0(tag, ": RSP"))
}
if (display == "Receiver")
return(p1)
if (display == "RSP")
return(p2)
if (display == "Both")
ggpubr::ggarrange(p1, p2)
}
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = c(NA, "#BABCBF"))
p
head(df)
summary(df)
as.factor(df$MAP)
summary(as.factor(df$MAP))
p <- p + ggplot2::scale_fill_gradientn(colours = c(NULL, "#BABCBF"))
p
rm(p)
p
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p
df$MAP[df$MAP == 1] <- NA
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 1] <- NA
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = c(NA, "#BABCBF"))
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = c("#BABCBF"))
p
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = c(NA, "#BABCBF"))
summary(df)
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
rm(p)
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 1] <- NA
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = "#BABCBF", na.value = NA)
p
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 0] <- NA
rm(p)
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = "#BABCBF", na.value = NA)
p <- p + ggplot2::theme_bw()
p
plotRSP <- function(input, tag, display = c("Receiver", "RSP", "Both"), type = c("lines", "points")) {
if (!file.exists(input$base.raster))
stop("Could not find file '", input$base.raster,"' in current directory. Please move your R session to where this file is located.\n")
base.raster <- raster:::raster(input$base.raster, full.names = TRUE)
detections <- input$detections
if (is.na(match(tag, names(detections))))
stop("The requested tag is not present in the input detections.\n")
detections <- detections[tag]
detections <- detections[[1]]
display <- match.arg(display)
type <- match.arg(type)
df.rec <- subset(detections, Position == "Receiver") # Track dataset with only receiver positions
tracks <- unique(detections$Track) # Individual tracks
color.tracks <- grDevices::palette(rainbow(length(tracks))) # Color palette for plotting tracks!
# Convert raster to points:
base.raster_df <- raster::rasterToPoints(base.raster)
# Make the points a dataframe for ggplot
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 0] <- NA
p <- ggplot2::ggplot(data = df, ggplot2::aes(y = Latitude, x = Longitude))
p <- p + ggplot2::geom_raster(ggplot2::aes(fill = MAP), show.legend = FALSE)
p <- p + ggplot2::scale_fill_gradientn(colours = "#BABCBF", na.value = NA)
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::theme(legend.position = "bottom")
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
p <- p + ggplot2::guides(colour = ggplot2::guide_legend(
title = paste0("Tracking period: ", min(detections$Date), " | ", max(detections$Date))))
if (display == "Receiver" | display == "Both") {
if (type == "lines")
p1 <- p + ggplot2::geom_path(data = df.rec, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
if (type == "points")
p1 <- p + ggplot2::geom_point(data = df.rec, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
p1 <- p1 + ggplot2::ggtitle(paste0(tag, ": Straight lines"))
}
if (display == "RSP" | display == "Both") {
if (type == "lines")
p2 <- p + ggplot2::geom_path(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
if (type == "points")
p2 <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Track))
p2 <- p2 + ggplot2::ggtitle(paste0(tag, ": RSP"))
}
if (display == "Receiver")
return(p1)
if (display == "RSP")
return(p2)
if (display == "Both")
ggpubr::ggarrange(p1, p2)
}
plotRSP(input = rsp.data, tag = "R64K-4075", display = "Both", type = "lines")
x <- rsp.data$detections[[1]][Track == "Track_8"]
start <- x[-.N, c("Longitude", "Latitude")]
stop <- x[-1, c("Longitude", "Latitude")]
aux <- cbind(start, stop)
hist(apply(aux, 1, function(m) geosphere::distm(x = m[1:2], y = m[3:4])))
